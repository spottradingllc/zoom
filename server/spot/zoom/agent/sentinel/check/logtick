#!/usr/bin/env python 

"""
Check designed to test whether a file has been modified within a specified 
amount of time.

EXAMPLE:
# python logtick.py -f /tmp/test.log -i 10
# python logtick.py --file /tmp/test.log --interval 3m
"""

import os
import re
import sys
import datetime
from argparse import ArgumentParser


_UNIT_DICT = {
    's': 1,
    'm': 60,
    'h': 60 * 60,
    'd': 60 * 60 * 24,
    'w': 60 * 60 * 24 * 7,
    }


def get_timedelta(string):
    lstring = string.lower()
    match = re.search('(\d+)(\w+)?', lstring)
    if match:
        value = int(match.group(1))
        multiplier = _UNIT_DICT.get(match.group(2), 1)
        
        seconds = value * multiplier
        return datetime.timedelta(seconds=seconds)
        
        
if __name__ == "__main__":
        
    parser = ArgumentParser(description='Check whether a file had been modified'
                            ' in some amount of time.')
    parser.add_argument('-f', '--file', required=True, 
                        help='Path to the file to check.')
    parser.add_argument('-i', '--interval', required=True,
                        help=('Time within which the file should have been '
                              'updated. The scipt understands parameters '
                              '(s)econd, (m)inute (h)our, (d)ay, (w)eek in the '
                              'form 1d, 2w, etc. Unless specified, it will '
                              'assume seconds.'))
    
    args = parser.parse_args()
    
    if os.path.exists(args.file):
        now = datetime.datetime.now()
        check_time = get_timedelta(args.interval)
        stats = os.stat(args.file)
        dt_mtime = datetime.datetime.fromtimestamp(stats.st_mtime)
        
        if now - dt_mtime > check_time:
            print ('The file {0} has not been modified within the configured '
                   'interval time {1}. Exiting with 1.'.format(args.file, 
                                                               args.interval))
            sys.exit(1)
        else:
            sys.exit(0)
                
    else:
        print ('The file {0} does not exist. Exiting with 1.'.format(args.file))
        sys.exit(1)